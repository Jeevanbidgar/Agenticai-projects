from __future__ import annotations

from loguru import logger
from utils.state import TestState, StepResult
from pathlib import Path
from utils.browser_helpers import dismiss_cookies as _dismiss
from utils.evidence import capture_step


async def dismiss_cookies(state: TestState) -> TestState:
    logger.info("[dismiss_cookies] Cookie banner handling")
    run_dir = Path(state.runtime["run_dir"]) 
    page = state.runtime.get("page")
    dismissed = False
    if page:
        cfg = state.domain_config.get("cookie_banners", {})
        reject = cfg.get("reject_selectors", [])
        accept = cfg.get("accept_selectors", [])
        try:
            await capture_step(page, run_dir, "02_dismiss_cookies_before", state.runtime.get("viewport_only", False), state)
            dismissed = await _dismiss(page, reject, accept)
            await capture_step(page, run_dir, "02_dismiss_cookies_after", state.runtime.get("viewport_only", False), state)
        except Exception as e:
            logger.debug(f"Cookie dismiss attempt error: {e}")
    state.steps.append(StepResult(name="dismiss_cookies", status="ok", message=f"Dismissed={dismissed}"))
    return state


