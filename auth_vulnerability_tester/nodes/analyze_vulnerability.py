from __future__ import annotations

from loguru import logger
from utils.state import TestState, StepResult
from detectors.vulnerability_analyzer import analyze


async def analyze_vulnerability(state: TestState) -> TestState:
    logger.info("[analyze_vulnerability] Analyzing vulnerability")
    # Scoring rubric
    severity = "None"
    details = []
    sso_ident = state.selectors_resolved.get("identifier_after_sso")
    if state.password_login_result.get("ok") and state.account_identifier:
        if not state.verification_required:
            if sso_ident and state.account_identifier and sso_ident == state.account_identifier:
                severity = "High"
                details.append("Password login succeeded after SSO with same account identifier and no verification.")
            else:
                severity = "Medium"
                details.append("Password login succeeded after SSO; identifier mismatch or unavailable.")
        else:
            severity = "Medium"
            details.append("Password login succeeded after SSO but verification was required.")
    else:
        if state.sso_result.get("status") == "ok":
            severity = "Low"
            details.append("SSO flow completed; no successful password login evidence.")
        else:
            severity = "None"
            details.append("No evidence of takeover.")
    outcome = {"vulnerability_found": severity in ("High", "Medium", "Low"), "details": f"Severity: {severity}. " + " ".join(details)}
    state.vulnerability_found = bool(outcome.get("vulnerability_found"))
    state.vulnerability_details = outcome.get("details")
    state.steps.append(StepResult(name="analyze_vulnerability", status="ok", message="Analysis complete (placeholder)"))
    return state


