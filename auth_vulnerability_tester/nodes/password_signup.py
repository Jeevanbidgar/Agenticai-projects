from __future__ import annotations

from pathlib import Path
from loguru import logger
from utils.state import TestState, StepResult
from utils.browser_helpers import navigate_and_wait, fill_form_field, save_storage_snapshot, to_absolute_url, smart_submit, attempt_logout
from utils.evidence import capture_step
from utils.human_behavior import human_delay


async def password_signup(state: TestState) -> TestState:
    logger.info("[password_signup] Password-based signup")
    run_dir = Path(state.runtime["run_dir"]) 
    page = state.runtime.get("page")
    state.account_created = False
    if page:
        # Navigate to signup
        # If inline form detected on landing page, use current URL
        inline = state.selectors_resolved.get("inline_form")
        signup_url = state.domain_config.get("signup_url") or (state.selectors_resolved.get("signup_candidates") or [None])[0]
        if signup_url:
            try:
                abs_url = to_absolute_url(state.url, signup_url)
                if inline and signup_url == state.url:
                    logger.info("[password_signup] Using inline form on landing page")
                    # Already on page; skip navigation
                    pass
                else:
                    logger.info(f"[password_signup] Navigating to signup URL: {abs_url}")
                    await navigate_and_wait(page, abs_url, timeout_ms=state.runtime.get("timeout", 30) * 1000)
                await capture_step(page, run_dir, "04_password_signup_before", state.runtime.get("viewport_only", False), state)
                # Small human-like pause before typing
                await human_delay(0.3, 0.6)
                # Fill fields (multi-step tolerant)
                email_sel = (inline or {}).get("email") or state.domain_config.get("email_field") or "input[type='email'], input[name*='email' i]"
                pw_sel = (inline or {}).get("password") or state.domain_config.get("password_field") or "input[type='password'], input[name*='password' i]"
                submit_sel = (inline or {}).get("submit") or state.domain_config.get("submit_button") or "button:has-text('Continue'), button:has-text('Next'), button[type='submit']"
                logger.info(f"[password_signup] Filling fields email={email_sel} password={pw_sel}")
                ok1 = await fill_form_field(page, email_sel, state.test_email or "") if email_sel else False
                ok2 = False
                if pw_sel:
                    ok2 = await fill_form_field(page, pw_sel, state.test_password or "")
                # If password not present yet, click continue/next and try password again
                if not ok2:
                    try:
                        if submit_sel:
                            logger.info("[password_signup] Clicking intermediate submit to reach password step")
                            await page.locator(submit_sel).first.click()
                            await navigate_and_wait(page, page.url, timeout_ms=state.runtime.get("timeout", 30) * 1000)
                            await human_delay(0.3, 0.6)
                            ok2 = await fill_form_field(page, pw_sel, state.test_password or "") if pw_sel else False
                    except Exception:
                        pass
                # Allow client-side validators to run on blur
                await human_delay(0.2, 0.5)
                # Try explicit submit; fallback to smart heuristics
                attempted = False
                if submit_sel:
                    try:
                        logger.info(f"[password_signup] Clicking submit: {submit_sel}")
                        await page.locator(submit_sel).first.click()
                        attempted = True
                    except Exception:
                        attempted = False
                if not attempted:
                    logger.info("[password_signup] Fallback smart_submit")
                    await smart_submit(page, submit_sel)
                await navigate_and_wait(page, page.url, timeout_ms=state.runtime.get("timeout", 30) * 1000)
                await capture_step(page, run_dir, "04_password_signup_after", state.runtime.get("viewport_only", False), state)
                state.account_created = bool(ok1 and ok2)
                await save_storage_snapshot(page, "after_signup", state.storage_artifacts)
                # Immediately attempt to log out to match pure manual flow
                try:
                    did_logout = await attempt_logout(page, state.domain_config)
                    logger.info(f"[password_signup] Logout attempted: {did_logout}")
                    await capture_step(page, run_dir, "05_logout_after_signup", state.runtime.get("viewport_only", False), state)
                except Exception:
                    pass
            except Exception as e:
                logger.debug(f"password_signup error: {e}")
    state.steps.append(StepResult(name="password_signup", status="ok" if state.account_created else "inconclusive", message=f"created={state.account_created}"))
    return state


