from __future__ import annotations

from pathlib import Path
from loguru import logger
from utils.state import TestState, StepResult, SSOButton
from detectors.sso_detector import google_sso_selectors, all_sso_selectors
from utils.browser_helpers import find_sso_buttons, capture_performance_metrics
from utils.evidence import capture_step


async def detect_sso_buttons(state: TestState) -> TestState:
    logger.info("[detect_sso_buttons] Detecting SSO options")
    selectors = google_sso_selectors(state.domain_config)
    run_dir = Path(state.runtime["run_dir"]) 
    page = state.runtime.get("page")
    found = selectors
    catalog = {}
    if page:
        try:
            await capture_step(page, run_dir, "03_detect_sso_buttons_before", state.runtime.get("viewport_only", False), state)
            # Prefer current page; do NOT navigate away here
            # Catalog all providers without executing their flows
            all_map = all_sso_selectors(state.domain_config)
            logger.info(f"[detect_sso_buttons] Providers to scan: {list(all_map.keys())}")
            for provider, sels in all_map.items():
                matches = await find_sso_buttons(page, sels, provider_name=provider)
                catalog[provider] = matches
                logger.info(f"[detect_sso_buttons] {provider}: matched {len(matches)}")
            # SPA/lazy-loaded: wait and rescan briefly
            try:
                await page.wait_for_timeout(1200)
                for provider, sels in all_map.items():
                    if catalog.get(provider):
                        continue
                    matches = await find_sso_buttons(page, sels)
                    if matches:
                        catalog[provider] = matches
            except Exception:
                pass
            found = catalog.get("google", selectors)
            await capture_step(page, run_dir, "03_detect_sso_buttons_after", state.runtime.get("viewport_only", False), state)
            state.timings["detect_sso_buttons"] = await capture_performance_metrics(page)
        except Exception as e:
            logger.debug(f"SSO button detection error: {e}")
    state.selectors_resolved["sso_catalog"] = catalog
    state.sso_options = [SSOButton(label="Google", selector=sel) for sel in found]
    state.steps.append(StepResult(name="detect_sso_buttons", status="ok", message=f"Found {len(found)} google selectors; cataloged providers: {list(catalog.keys())}"))
    return state


