from __future__ import annotations

from typing import Any, List, Optional
from pydantic import BaseModel, Field


class StepResult(BaseModel):
    name: str
    status: str = Field(default="skipped")  # placeholder statuses in Phase 1
    message: Optional[str] = None
    screenshot_path: Optional[str] = None


class Error(BaseModel):
    code: str
    message: str


class SSOButton(BaseModel):
    label: Optional[str] = None
    selector: Optional[str] = None


class TestState(BaseModel):
    # Inputs and configuration
    url: str
    domain_config: dict
    test_email: Optional[str] = None
    test_password: Optional[str] = None

    # Runtime/browser objects (Phase 1: None)
    browser_page: Any = None

    # Working data
    selectors_resolved: dict = Field(default_factory=dict)
    steps: List[StepResult] = Field(default_factory=list)
    evidence_paths: List[str] = Field(default_factory=list)
    errors: List[Error] = Field(default_factory=list)
    verification_required: bool = False
    sso_options: List[SSOButton] = Field(default_factory=list)
    account_identifier: Optional[str] = None
    storage_artifacts: dict = Field(default_factory=dict)
    timings: dict = Field(default_factory=dict)
    mailslurp_inbox_id: Optional[str] = None
    account_created: bool = False
    sso_result: dict = Field(default_factory=dict)
    password_login_result: dict = Field(default_factory=dict)
    oauth_redirects: list = Field(default_factory=list)

    # Results
    vulnerability_found: bool = False
    vulnerability_details: Optional[str] = None

    # CLI/runtime options container
    runtime: dict = Field(default_factory=dict)

    def to_dict(self) -> dict:
        data = self.model_dump()
        # Drop non-serializable runtime entries
        runtime = data.get("runtime", {})
        for key in ["bm", "page", "context"]:
            if key in runtime:
                runtime.pop(key, None)
        data["runtime"] = runtime
        return data

    @classmethod
    def from_dict(cls, d: dict) -> "TestState":
        return cls(**d)


