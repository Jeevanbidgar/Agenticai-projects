from __future__ import annotations

import json
import time
from dataclasses import dataclass
import asyncio
from pathlib import Path
from typing import Optional, Dict, Any

from loguru import logger
from PIL import Image
from playwright.async_api import Page

from .browser_helpers import capture_step_evidence


@dataclass
class EvidenceRecord:
    step: str
    timestamp: float
    screenshot: Optional[str] = None
    html: Optional[str] = None
    cookies: Optional[str] = None
    notes: Optional[str] = None


def _redact_headers(headers: Dict[str, Any], redact: bool) -> Dict[str, Any]:
    if not redact:
        return headers
    redacted = {}
    for k, v in (headers or {}).items():
        lk = k.lower()
        if any(token in lk for token in ("authorization", "cookie", "set-cookie", "token", "apikey", "api-key")):
            redacted[k] = "<redacted>"
        else:
            redacted[k] = v
    return redacted


async def attach_network_logging(page: Page, out_path: Path, redact_pii: bool = False) -> None:
    out_path.parent.mkdir(parents=True, exist_ok=True)

    async def _write(entry: Dict[str, Any]):
        try:
            with out_path.open("a", encoding="utf-8") as f:
                f.write(json.dumps(entry) + "\n")
        except Exception as exc:
            logger.debug(f"network log write failed: {exc}")

    def _ts() -> float:
        return time.time()

    async def on_request(req):
        try:
            entry = {
                "type": "request",
                "ts": _ts(),
                "url": req.url,
                "method": req.method,
                "headers": _redact_headers(await req.all_headers(), redact_pii),
            }
            await _write(entry)
        except Exception:
            pass

    async def on_response(resp):
        try:
            req = resp.request
            timing = getattr(resp, "timing", None)
            status_val = resp.status
            entry = {
                "type": "response",
                "ts": _ts(),
                "url": resp.url,
                "method": req.method if req else None,
                "status": status_val,
                "headers": _redact_headers(await resp.all_headers(), redact_pii),
                "timing": timing if isinstance(timing, dict) else None,
            }
            await _write(entry)
        except Exception:
            pass

    page.on("request", lambda r: asyncio.create_task(on_request(r)))
    page.on("response", lambda r: asyncio.create_task(on_response(r)))


async def capture_step(page: Page, run_dir: Path, step_name: str, viewport_only: bool, state) -> EvidenceRecord:
    artifacts = await capture_step_evidence(page, run_dir, step_name, viewport_only)
    rec = EvidenceRecord(
        step=step_name,
        timestamp=time.time(),
        screenshot=artifacts.get("screenshot"),
        html=artifacts.get("html"),
        cookies=artifacts.get("cookies"),
    )
    logger.info(f"[evidence] {step_name} -> screenshot={rec.screenshot}, html={rec.html}")
    try:
        state.evidence_paths.append(artifacts.get("screenshot"))
    except Exception:
        pass
    return rec


def validate_evidence(run_dir: Path, viewport: Dict[str, int]) -> Dict[str, Any]:
    """Minimal evidence validation for report completeness."""
    report: Dict[str, Any] = {"screenshots": [], "html": [], "network": {}}
    shots = list((run_dir / "screenshots").glob("*.png"))
    for shot in shots:
        try:
            img = Image.open(shot)
            w, h = img.size
            ok = w >= viewport.get("width", 0) and h >= viewport.get("height", 0)
            report["screenshots"].append({"file": str(shot), "width": w, "height": h, "ok": ok})
        except Exception:
            report["screenshots"].append({"file": str(shot), "ok": False})
    for html in (run_dir / "screenshots").glob("*.html"):
        try:
            n = len(html.read_text(encoding="utf-8"))
            report["html"].append({"file": str(html), "bytes": n, "ok": n > 0})
        except Exception:
            report["html"].append({"file": str(html), "ok": False})
    net = run_dir / "evidence" / "network.jsonl"
    report["network"] = {"file": str(net), "exists": net.exists(), "lines": 0}
    if net.exists():
        try:
            report["network"]["lines"] = sum(1 for _ in net.open("r", encoding="utf-8"))
        except Exception:
            pass
    return report


