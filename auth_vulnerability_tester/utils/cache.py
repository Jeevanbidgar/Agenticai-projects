from __future__ import annotations

import json
from pathlib import Path
from typing import Optional, Dict, Any

import tldextract


def _cache_dir(base: Path) -> Path:
    d = base / "config" / "cache"
    d.mkdir(parents=True, exist_ok=True)
    return d


def _domain_key(url: str) -> str:
    ext = tldextract.extract(url)
    return f"{ext.domain}.{ext.suffix}" if ext.suffix else ext.domain


def load_cached_selectors(project_root: Path, url: str) -> Optional[Dict[str, Any]]:
    dkey = _domain_key(url)
    path = _cache_dir(project_root) / f"{dkey}.json"
    if not path.exists():
        return None
    try:
        return json.loads(path.read_text(encoding="utf-8"))
    except Exception:
        return None


def save_cached_selectors(project_root: Path, url: str, data: Dict[str, Any]) -> None:
    dkey = _domain_key(url)
    path = _cache_dir(project_root) / f"{dkey}.json"
    try:
        path.write_text(json.dumps(data, indent=2), encoding="utf-8")
    except Exception:
        pass


