from __future__ import annotations

import re
import time
from typing import Optional

from loguru import logger
from playwright.async_api import BrowserContext


async def open_or_focus_gmail(context: BrowserContext) -> Optional[str]:
    for p in context.pages:
        if "mail.google.com" in (p.url or ""):
            await p.bring_to_front()
            return p.url
    page = await context.new_page()
    await page.goto("https://mail.google.com/mail/u/0/#inbox", wait_until="domcontentloaded")
    return page.url


async def click_latest_verification_link(context: BrowserContext, timeout_seconds: int = 120) -> bool:
    """Best-effort Gmail verification link clicker.

    Assumes the Google persistent context is already authenticated for Gmail.
    """
    await open_or_focus_gmail(context)
    start = time.time()
    last_error = None
    while time.time() - start < timeout_seconds:
        try:
            page = context.pages[0]
            # Open the first (latest) email in inbox list
            rows = page.locator("tr.zA").first
            await rows.click()
            # Find the first link in the email body
            body = page.locator("div.a3s a").first
            if await body.count() > 0:
                href = await body.get_attribute("href")
                if href and href.startswith("http"):
                    await body.click()
                    return True
        except Exception as exc:
            last_error = exc
        await page.wait_for_timeout(3000)
        try:
            await page.goto("https://mail.google.com/mail/u/0/#inbox", wait_until="domcontentloaded")
        except Exception:
            pass
    if last_error:
        logger.debug(f"Gmail helper timeout, last error: {last_error}")
    return False


