from __future__ import annotations

import yaml
import tldextract
from pathlib import Path
from typing import Dict, Any


def load_yaml(path: str) -> Dict[str, Any]:
    with open(path, "r", encoding="utf-8") as f:
        return yaml.safe_load(f) or {}


def registered_domain_from_url(url: str) -> str:
    ext = tldextract.extract(url)
    if ext.suffix:
        return f"{ext.domain}.{ext.suffix}"
    return ext.domain


def load_config_for_domain(url: str, config_path: str) -> Dict[str, Any]:
    base = load_yaml(config_path)

    # Load site-specific overrides
    sites_dir = Path(config_path).parent / "sites"
    site_overrides: Dict[str, Any] = {}
    if sites_dir.exists():
        for site_file in sites_dir.glob("*.yaml"):
            site_cfg = load_yaml(str(site_file))
            site_overrides.update(site_cfg)

    # Resolve domain precedence: exact subdomain -> base domain -> default
    reg_domain = registered_domain_from_url(url)
    ext = tldextract.extract(url)
    subdomain = ext.subdomain
    exact_host = f"{subdomain}.{reg_domain}" if subdomain else reg_domain

    # Merge precedence: default (lowest) -> base domain -> exact host (highest)
    resolved = base.copy()
    if "default" in site_overrides:
        _merge(resolved, site_overrides["default"])
    if reg_domain in site_overrides:
        _merge(resolved, site_overrides[reg_domain])
    if exact_host in site_overrides:
        _merge(resolved, site_overrides[exact_host])
    return resolved


def _merge(dst: Dict[str, Any], src: Dict[str, Any]) -> None:
    for k, v in src.items():
        if isinstance(v, dict) and isinstance(dst.get(k), dict):
            _merge(dst[k], v)
        else:
            dst[k] = v


